{"title":"(메모) 우분투 포맷 및 개발용 서버 셋팅 (old)","markdown":{"yaml":{"title":"(메모) 우분투 포맷 및 개발용 서버 셋팅 (old)","author":"신록예찬","date":"01/01/2000"},"headingText":"About this doc","containsRefs":false,"markdown":"\n\n\n`-` 우분투에서 여러가지 개발환경을 설정하는 방법을 포스팅 하겠다. \n\n`-` 이 포스트는 우분투를 메인OS(사무용+연구용)로 사용하고 싶은 사람, 우분투를 활용하여 개발용 서버를 구축하고 싶은 사람에게 모두 유용한다. \n\n`-` 이 포스트는 2080 이상의 GPU를 활용한 학습을 원하는 사람에게 유용하다. \n\n`-` 이 포스트는 R과 파이썬을 동시에 쓰는 사람에게 유용하다. \n\n`-` 이 포스트는 Rstudio, Jupyter Lab을 동시에 쓰는 사람에게 유용하다. \n\n`-` 매년 조금씩 셋팅방법이 다른것 같다. \n\n`-` 가장 최근에는 2023년 3월8일에 이 블로그 내용으로 셋팅해보았음. \n\n# 우분투설치 \n\n`-` 22.04부터는 파티션 나누지 않고 그냥 설치해도 잘 되는것 같다. \n\n# 네트워크 설정\n\n`-` `?`표시있는 아이콘 $\\to$ Wired Connected $\\to$ Wired Settings $\\to$ Connection의 설정 $\\to$ IPv4 $\\to$ Manual $\\to$ Address, Netmask, Gateway, DNS 설정 $\\to$ 네트워크 토글 \n\n\n# 한글설정 (개발용 서버일 경우 생략 가능)\n\n`-` 아래와 같이 커맨드에 친다. \n\n```default\nibus-setup\n```\n\n이걸 치면 `IBus Preferences` 라는 창이 나오는데 여기에서 (1) `Input Method` 탭 클릭 (2) `Add` 버튼 클릭 (3) `Korean` 선택 (4) `Hangul` 선택을 한다. \n\n`-` 위의 단계에서 `Korean`이 안보이면 `Language Support`로 가서 한국어팩을 설치하고 리부팅 하면 된다. (보통 실행하자마자 알아서 설치되더라.. 설치가 안되면 `Install / Remove Languages...` 이라는 탭을 클릭해서 설치하자) 리부팅을 꼭 해야한다는 것에 주의하자. \n\n`-` 이제 `Region & Language`로 가서 설정하면 된다. \n\n# 그래픽카드 드라이버설치\n\n`-` 전체적인 내용은 [여기](https://gist.github.com/bendangnuksung/981408031699e0ddc50a6f6fdcf185c2)를 참고하자. \n\n`-` 준비작업 \n\n```default\nsudo apt update \nsudo apt install gcc\nsudo apt install build-essential\n```\n\n`-` 우선 `gedit`를 열고 아래를 복사해서 붙여넣는다. \n\n```default\nblacklist nouveau\noptions nouveau modeset=0\n```\n\n파일이름을 `blacklist-nouveau.conf`로 `home`에 저장\n\n`-` 루트권한획득 \n\n```default\nsudo -i\n```\n아이디와 비밀번호를 입력하고 루트권한을 얻는다. \n\n`-` 아래를 입력한다. \n\n```default\nsudo cp /home/cgb2/blacklist-nouveau.conf /etc/modprobe.d\nsudo update-initramfs -u\nsudo reboot \n```\n\n`-` 그래픽카드 다운로드: 드라이버 설치파일을 다운받는다. [앤비디아공식홈페이지](https://www.geforce.com/drivers)에서 다운받자. OS를 리눅스 64-bit으로 선택하고 검색을 누르면 다운받아진다. \n\n`-` 그래픽키다 설치: 다운받은뒤에는 파일이 있는 폴더로 이동하여 \n\n```default\nchmod +x NVIDIA-Linux-x86_64-410.78.run\n```\n\n를 실행하자. 보통 `NVI`까지치고 적당히 `탭`을 누르면 알아서 뒷부분이 완성된다. 이 과정은 추후에 \n드라이버를 실행할수 있도록 권한을 풀어두는 것이다. 그리고 아래를 실행한다.\n\n```default\nsudo ./NVIDIA-Linux-x86_64-410.78.run\n```\n\n그 다음 드라이버가 잘 설치되었는지 확인한다. \n\n```default\nnvidia-smi\n```\n\n# 아나콘다\n\n`-` (아나콘다 설치) 아나콘다를 다운받은 폴더로 가서 아래와 같이 실행한다. \n\n```default\nbash Anaconda3-2019.03-Linux-x86_64.sh\n```\n\n대충 `bash Ana` 정도까지만 치고 `tab`을 누르면 알아서 완성된다. \n\n`-` (환경만들기) 커맨드를 키고  아래를 실행한다. \n\n```default\n(base) conda create -n py38r40 python=3.8\n(base) conda create --name py38r40 python=3.8\n```\n둘 중 아무거나 실행해도 된다. 파이썬 환경이 너무 높으면 나중에 `conda tensorflow-gpu`가 먹히지 않으니 환경을 만들때 파이썬버전을 3.8.x로 하자. (현시점 2021년 2월25일기준 3.9.x이면 `conda tensorflow-gpu` 가 동작하지 않음.)\n\n# ssh연결 \n\n`-` 처음에 ssh를 연결하기위해서는 연결**당하는** 컴퓨터에 가서 아래를 실행해야 한다. \n```\nsudo apt install openssh-server\n```\n\n***22번포트 우회하기***\n\n`-` step1: `/etc/ssh/sshd_config` 파일을 연다. \n\n```default\nsudo vi /etc/ssh/sshd_config \n```\n\n`-` step2: Port 22 라고 된 부분의 주석을 풀고 원하는 포트번호 설정 \n\n```default\n...\n\n#Port 22\n#AddressFamily any\n#ListenAddress 0.0.0.0\n#ListenAddress ::\n\n...\n```\n\n\n\n\n`-` step3: 수정내용을 적용 \n\n```default\nsudo systemctl restart ssh.service\n```\n\n`-` step4: 수정한 포트로 ssh접속 \n\n# 주피터 원격제어\n\n`-`  1단계: 주피랩설치  \n\n```default\n(py38) conda install -c conda-forge jupyterlab\n```\n\n- Note: 사실 위에서 주피터랩을 따로 설치안해도 주피터랩이 잘만 실행된다. 하지만 이렇게하니까 나중에 R커널을 만들기위해 `IRkernel::installspec()`을 실행할때 에러가 난다. \n\n`-` 2단계: 패스워드 설정\n```default\n(py38) jupyter lab --generate-config\n(py38) jupyter lab password\n```\n\n`-` 3단계: jupyter lab 환경설정 \n\n```default\nnano /home/cgb/.jupyter/jupyter_lab_config.py \n```\n\n아래를 변경 \n\n```default\nc.ServerApp.ip = '192.168.0.4'\nc.ServerApp.port = 1306\nc.ServerApp.open_browser = False\n```\n여기에서 `192.168.0.4` 는 내부아이피다. 고정아피이가 있다면 고정아이피 주소를 쓰면 된다. \n\n# 주피터노트북 원격제어\n\n`-` 1단계: 주피터노트북 설치 (보통 lab을 설치하면 이미 설치되어있음) \n```default\n(py38) conda install -c conda-forge notebook \n```\n\n`-` 2단계: 패스워드 설정\n\n```python\nfrom notebook.auth import passwd\npasswd()\nEnter password: \nVerify password: \n```\n생성된값 (argon 어쩌고..)을 복사  \n\n`-` 3단계: 환경설정 \n\n```default\njupyter notebook --generate-config\nnano /home/cgb/.jupyter/jupyter_notebook_config.py\n```\n\n아이피주소와 패스워드를 바꾼다. (port는 선택, browser도 선택 ) \n\n```default\nc.NotebookApp.open_browser = False\nc.NotebookApp.ip = '192.168.0.4'\nc.NotebookApp.port = 1307\nc.NotebookApp.password = ''\n```\n여기에서 `192.168.0.4` 는 내부아이피다. 고정아피이가 있다면 고정아이피 주소를 쓰면 된다.  \n\n> Tip: 주피터노트북과 랩을 양쪽으로 셋팅후 주피터 노트북으로 실행하면 2개를 모두 쓸 수 있음 \n\n# R설치ver1: (base)에 설치 \n\n`-` 설치전: 기존의 R 삭제 \n\n```default\nconda remove r-base -y \nsudo apt-get remove r-base-core \nsudo apt purge r-base* r-recommended r-cran-*\nsudo apt autoremove\n```\n\n`-` [R설치전 준비작업](https://cran.r-project.org/bin/linux/ubuntu/fullREADME.html): 나노에디터를 키고 /etc/apt/sources.list를 연다. \n\n```default\nsudo nano /etc/apt/sources.list\n```\n\n화살표로 이동하여 맨아래로 간뒤에 아래중 하나를 추가한다. (나는 focal-cran40으로 추가함)\n\n```default\ndeb https://cloud.r-project.org/bin/linux/ubuntu impish-cran40/\ndeb https://cloud.r-project.org/bin/linux/ubuntu hirsute-cran40/\ndeb https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/\ndeb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran40/\ndeb https://cloud.r-project.org/bin/linux/ubuntu xenial-cran40/\n```\n\n저장후 나노에디터 종료. 그리고 아래를 실행. \n\n```default\nsudo apt-get update\n```\n\n경우에 따라서 아래와 같은 에러메시지가 뜰 수 있다. \n\n```default\n...\nW: GPG error: https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/ InRelease: The following signatures couldn't be verified because the public key is not available: NO_PUBKEY 51716619E084DAB9 \n...\n```\n\n공개키가 없어서 생기는 에러이므로 아래와 같이 가져온다. \n\n```default\nwget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | sudo tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc\nsudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9\n#sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 51716619E084DAB9\n```\n\n그리고 다시 아래를 실행\n\n```default\nsudo apt-get update\n```\n\n에러가 없이 뭔가 마무리 되어야한다. \n\n```default\n(base) cgb3@cgb3:~$ sudo apt-get update\nIgn:1 http://linux.dropbox.com/ubuntu disco InRelease\nHit:2 http://security.ubuntu.com/ubuntu focal-security InRelease  \nHit:3 http://kr.archive.ubuntu.com/ubuntu focal InRelease                                 \nHit:4 http://ppa.launchpad.net/graphics-drivers/ppa/ubuntu focal InRelease                \nHit:5 http://linux.dropbox.com/ubuntu disco Release                 \nGet:6 https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/ InRelease [3,622 B]\nHit:8 http://kr.archive.ubuntu.com/ubuntu focal-updates InRelease\nGet:9 https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/ Packages [46.4 kB]\nHit:10 http://kr.archive.ubuntu.com/ubuntu focal-backports InRelease\nFetched 50.0 kB in 1s (36.5 kB/s)                   \nReading package lists... Done\n```\n\n`-` R설치 \n\n```default\nwget http://security.ubuntu.com/ubuntu/pool/main/i/icu/libicu66_66.1-2ubuntu2_amd64.deb\nsudo dpkg -i libicu66_66.1-2ubuntu2_amd64.deb\nsudo apt-get install r-base\n```\n\n`-` tidyverse 설치 (R studio 설치전에 tidyverse 설치해야함)\n\n`-` Rstudio 설치: <https://www.rstudio.com/products/rstudio/download-server/debian-ubuntu/> \n\n> 우분투22로 설정할것!!\n\n```default\nsudo apt remove rstudio-server\nsudo apt-get install gdebi-core\nwget https://download2.rstudio.org/server/jammy/amd64/rstudio-server-2022.12.0-353-amd64.deb\nsudo gdebi rstudio-server-2022.12.0-353-amd64.deb\n```\n\n`-` Rstudio를 설치하면 `~/R/x86_64-conda-linux-gnu-library/4.1`이 새로 생성된다. \n\n- Rstudio에서 설치한 패키지는 이 폴더에 저장된다. \n\n`-` 주피터와 R커널 연결 \n\n```default\nR # sudo R \ninstall.packages(\"IRkernel\")\nIRkernel::installspec()\n```\n\n# R설치ver2: (py38r40)에 설치 \n\n`-` R설치 \n\n```default\n(py38r40) conda install -c conda-forge r-essentials=4.0\n```\n\n이러면 콘다환경에는 R이 깔리고 base에는 R이 깔리지 않는다. \n\n`-` 커널연결 \n\n콘다환경에서 R을 실행한다. Rstudio가 아니라 커맨드에서 R을 실행해야한다. 그리고 아래를 실행하면 주피터랩과 R환경이 연결된다. \n\n```R\nIRkernel::installspec()\n```\n\n이제 주피터랩에서 R kernel을 사용할 수 있다. \n\n# 가상환경에서 Rstudio server 설치 (어려움) \n\n`-` 이제 Rstudio server를 설치하는 방법을 다룬다. \n\n\n\n`-` 먼저 Rstudio를 설치한다. 참고로 Rstudio server 설치하는법은 [여기](https://rstudio.com/products/rstudio/download-server/debian-ubuntu/)를 참고하라. 요약하면 터미널에서 아래3줄을 입력하기만 하면된다. \n\n```default\n(py38r40) sudo apt-get install gdebi-core\n(py38r40) wget https://download2.rstudio.org/server/bionic/amd64/rstudio-server-1.2.5033-amd64.deb\n(py38r40) sudo gdebi rstudio-server-1.2.5033-amd64.deb\n```\n\n> Warning: Rstudio 1.3x 이상을 설치하지말고 1.2x를 설치해야 한다. 이상하게 1.3x이상은 후에 서술할 Gregor Strurm가 그의 깃허브에서 제안하는 방식이 잘 동작하지 않았다. 이는 알려진 문제였고 이를 해결하는 해결책을 서술한 스레드가 있어보이긴 했지만 나는 그냥 Rstudio 1.2x를 설치하고 쓰는 것을 선택했다. \n\n> Note: 이미 rstudio server 가 다른버전으로 깔려있다면 `sudo apt remove rstudio-server` 를 통하여 삭제하고 설치하자. \n\n`-` 이제 Rstudio 설치가 끝났다. 설치된 Rstudio를 아나콘다 가상환경에 설치된 R과 연결해보자. 우선 아래를 실행한다. \n\n```default\n(py38r40) sudo apt install uuid\n(py38r40) sudo apt install git\n(py38r40) git clone https://github.com/grst/rstudio-server-conda.git\n```\n\n위에 두줄은 [Gregor Sturm](https://github.com/grst/rstudio-server-conda)이 만든 어떤 프로그램을 쓰기 위한 사전준비작업이다. 마지막줄을 실행하면 [Gregor Sturm](https://github.com/grst/rstudio-server-conda)이 만든 프로그램이 다운받아진다. 이게 프로그램 설치가 완료된것이다. 이제 컴퓨터 껐다 킬때마다 아래를 실행한다. \n\n```default\n(py38r40) ./rstudio-server-conda/local/start_rstudio_server.sh 8787 # use any free port number here. \n```\n\n이제 `192.168.0.4:8787` 따위의 주소로 접속하면 `Rstudio`를 쓸 수 있다. 참고로 system-wide Rstudio server를 죽여야 할 때가 있다. 그럴땐 아래 명령을 치면 된다. \n\n```default\n(py38r40) sudo systemctl disable rstudio-server.service\n(py38r40) sudo systemctl stop rstudio-server.service\n```\n\n# 자주 설치하는 패키지 리스트\n\n`-` 아래를 미리 깔아두자.. \n\n```default\n# conda install -c conda-forge notebook\nconda install pytorch torchvision torchaudio cudatoolkit=11.3 -c pytorch\nconda install -c conda-forge plotly \npip install plotnine\npip install seaborn\npip install opencv-python\npip install folium\npip install pandas_datareader\nconda install -c conda-forge r-essentials=4 \npip install rpy2\nconda install -c conda-forge python-graphviz\n```\n\n`-` tensorflow-gpu 는 현재(2022-03-06) python=3.10 에서 동작함 \n\n```default\nconda create -n py310 python=3.10 \nconda activate py310 \nconda install -c conda-forge tensorflow-gpu \n```\n\n`-` 아래를 설치하면 좋음 \n\n```default\nsudo apt install mc \n```\n\n# 터미널 예쁘게 만들기 \n\n`-` zsh 설치 + oh my zsh 설치 \n```default\nsudo install zsh \nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n```\n\n`-` 테마변경 \n\n(1) .zshrc 파일 열기 \n\n```default\nnano ~/.zshrc \n```\n\n(2) 아래의 내용 수정 \n\n```default\n...\nZSH_THEME=\"agnoster\"\n...\n```\n\n`-` 색상변경\n\n(1) 아래의 파일 열기 \n\n```default\ncd ~/.oh-my-zsh/themes/\nnano agnoster.zsh-theme  \n```\n\n(2) 내용수정 \n\n```default\n...\nprompt_dir() {\n  prompt_segment 39d $CURRENT_FG '%~'\n}\n...\n```\n\n# sublime text and TeX (개발용 서버일 경우 생략 가능)\n\n`-` 'Ubuntu Software'에 가서 'sublime Text'를 치면 다운받을 수 있다. 다운받은뒤에 'file' -> 'open folder'를 활용하여 깃허브의 로칼저장소를 열어두면 편리하다. \n\n`-` 아래를 실행하여 TeX을 깐다. \n```default\nsudo apt install texlive-full\n```\n\n`-` 이제 sublime과 latex을 연결하여보자. [여기](https://latextools.readthedocs.io/en/latest/install/#requirements-and-setup)를 참고하자. (1) sublime을 키고 '컨트롤+쉬프트+p'를 눌러 'Install Package Control' 선택 (2) 다시 '컨트롤+쉬프트+p' 를 눌러 'Package Control: Install Package'를 실행 (3) 그러면 바로 검색창이 나오는데 거기서 'LaTeXTools'를 입력해서 실행 (4) 다시 '컨트롤+쉬프트+p'를 누르고 'LaTeXTools: Check system' 선택. 모두 'available'이 나오면 잘 설치된 것이다. \n\n`-` `*.tex`파일을 열고 '컨트롤+b'를 누르자. 처음이면 어떤 메뉴들이 보일텐데 그냥 'Latex'을 선택하자. 그러면 코딩결과가 pdf로 나온다. \n\n`-` (수식미리보기) 'Perferences' > 'Packages Setting' > 'LaTeXTools' > 'Settings-User'를 선택한다. '93번째라인'에 'preview_math_mode'를 \"all\"로 바꾼다. 그러면 수식들이 미리 출력된다. 그외에도 자유롭게 셋팅을 조정할 수 있다. 원래셋팅은  'Perferences' > 'Packages Setting' > 'LaTeXTools' > 'Settings-Defaults' 에 있다. \n","srcMarkdownNoYaml":"\n\n# About this doc\n\n`-` 우분투에서 여러가지 개발환경을 설정하는 방법을 포스팅 하겠다. \n\n`-` 이 포스트는 우분투를 메인OS(사무용+연구용)로 사용하고 싶은 사람, 우분투를 활용하여 개발용 서버를 구축하고 싶은 사람에게 모두 유용한다. \n\n`-` 이 포스트는 2080 이상의 GPU를 활용한 학습을 원하는 사람에게 유용하다. \n\n`-` 이 포스트는 R과 파이썬을 동시에 쓰는 사람에게 유용하다. \n\n`-` 이 포스트는 Rstudio, Jupyter Lab을 동시에 쓰는 사람에게 유용하다. \n\n`-` 매년 조금씩 셋팅방법이 다른것 같다. \n\n`-` 가장 최근에는 2023년 3월8일에 이 블로그 내용으로 셋팅해보았음. \n\n# 우분투설치 \n\n`-` 22.04부터는 파티션 나누지 않고 그냥 설치해도 잘 되는것 같다. \n\n# 네트워크 설정\n\n`-` `?`표시있는 아이콘 $\\to$ Wired Connected $\\to$ Wired Settings $\\to$ Connection의 설정 $\\to$ IPv4 $\\to$ Manual $\\to$ Address, Netmask, Gateway, DNS 설정 $\\to$ 네트워크 토글 \n\n\n# 한글설정 (개발용 서버일 경우 생략 가능)\n\n`-` 아래와 같이 커맨드에 친다. \n\n```default\nibus-setup\n```\n\n이걸 치면 `IBus Preferences` 라는 창이 나오는데 여기에서 (1) `Input Method` 탭 클릭 (2) `Add` 버튼 클릭 (3) `Korean` 선택 (4) `Hangul` 선택을 한다. \n\n`-` 위의 단계에서 `Korean`이 안보이면 `Language Support`로 가서 한국어팩을 설치하고 리부팅 하면 된다. (보통 실행하자마자 알아서 설치되더라.. 설치가 안되면 `Install / Remove Languages...` 이라는 탭을 클릭해서 설치하자) 리부팅을 꼭 해야한다는 것에 주의하자. \n\n`-` 이제 `Region & Language`로 가서 설정하면 된다. \n\n# 그래픽카드 드라이버설치\n\n`-` 전체적인 내용은 [여기](https://gist.github.com/bendangnuksung/981408031699e0ddc50a6f6fdcf185c2)를 참고하자. \n\n`-` 준비작업 \n\n```default\nsudo apt update \nsudo apt install gcc\nsudo apt install build-essential\n```\n\n`-` 우선 `gedit`를 열고 아래를 복사해서 붙여넣는다. \n\n```default\nblacklist nouveau\noptions nouveau modeset=0\n```\n\n파일이름을 `blacklist-nouveau.conf`로 `home`에 저장\n\n`-` 루트권한획득 \n\n```default\nsudo -i\n```\n아이디와 비밀번호를 입력하고 루트권한을 얻는다. \n\n`-` 아래를 입력한다. \n\n```default\nsudo cp /home/cgb2/blacklist-nouveau.conf /etc/modprobe.d\nsudo update-initramfs -u\nsudo reboot \n```\n\n`-` 그래픽카드 다운로드: 드라이버 설치파일을 다운받는다. [앤비디아공식홈페이지](https://www.geforce.com/drivers)에서 다운받자. OS를 리눅스 64-bit으로 선택하고 검색을 누르면 다운받아진다. \n\n`-` 그래픽키다 설치: 다운받은뒤에는 파일이 있는 폴더로 이동하여 \n\n```default\nchmod +x NVIDIA-Linux-x86_64-410.78.run\n```\n\n를 실행하자. 보통 `NVI`까지치고 적당히 `탭`을 누르면 알아서 뒷부분이 완성된다. 이 과정은 추후에 \n드라이버를 실행할수 있도록 권한을 풀어두는 것이다. 그리고 아래를 실행한다.\n\n```default\nsudo ./NVIDIA-Linux-x86_64-410.78.run\n```\n\n그 다음 드라이버가 잘 설치되었는지 확인한다. \n\n```default\nnvidia-smi\n```\n\n# 아나콘다\n\n`-` (아나콘다 설치) 아나콘다를 다운받은 폴더로 가서 아래와 같이 실행한다. \n\n```default\nbash Anaconda3-2019.03-Linux-x86_64.sh\n```\n\n대충 `bash Ana` 정도까지만 치고 `tab`을 누르면 알아서 완성된다. \n\n`-` (환경만들기) 커맨드를 키고  아래를 실행한다. \n\n```default\n(base) conda create -n py38r40 python=3.8\n(base) conda create --name py38r40 python=3.8\n```\n둘 중 아무거나 실행해도 된다. 파이썬 환경이 너무 높으면 나중에 `conda tensorflow-gpu`가 먹히지 않으니 환경을 만들때 파이썬버전을 3.8.x로 하자. (현시점 2021년 2월25일기준 3.9.x이면 `conda tensorflow-gpu` 가 동작하지 않음.)\n\n# ssh연결 \n\n`-` 처음에 ssh를 연결하기위해서는 연결**당하는** 컴퓨터에 가서 아래를 실행해야 한다. \n```\nsudo apt install openssh-server\n```\n\n***22번포트 우회하기***\n\n`-` step1: `/etc/ssh/sshd_config` 파일을 연다. \n\n```default\nsudo vi /etc/ssh/sshd_config \n```\n\n`-` step2: Port 22 라고 된 부분의 주석을 풀고 원하는 포트번호 설정 \n\n```default\n...\n\n#Port 22\n#AddressFamily any\n#ListenAddress 0.0.0.0\n#ListenAddress ::\n\n...\n```\n\n\n\n\n`-` step3: 수정내용을 적용 \n\n```default\nsudo systemctl restart ssh.service\n```\n\n`-` step4: 수정한 포트로 ssh접속 \n\n# 주피터 원격제어\n\n`-`  1단계: 주피랩설치  \n\n```default\n(py38) conda install -c conda-forge jupyterlab\n```\n\n- Note: 사실 위에서 주피터랩을 따로 설치안해도 주피터랩이 잘만 실행된다. 하지만 이렇게하니까 나중에 R커널을 만들기위해 `IRkernel::installspec()`을 실행할때 에러가 난다. \n\n`-` 2단계: 패스워드 설정\n```default\n(py38) jupyter lab --generate-config\n(py38) jupyter lab password\n```\n\n`-` 3단계: jupyter lab 환경설정 \n\n```default\nnano /home/cgb/.jupyter/jupyter_lab_config.py \n```\n\n아래를 변경 \n\n```default\nc.ServerApp.ip = '192.168.0.4'\nc.ServerApp.port = 1306\nc.ServerApp.open_browser = False\n```\n여기에서 `192.168.0.4` 는 내부아이피다. 고정아피이가 있다면 고정아이피 주소를 쓰면 된다. \n\n# 주피터노트북 원격제어\n\n`-` 1단계: 주피터노트북 설치 (보통 lab을 설치하면 이미 설치되어있음) \n```default\n(py38) conda install -c conda-forge notebook \n```\n\n`-` 2단계: 패스워드 설정\n\n```python\nfrom notebook.auth import passwd\npasswd()\nEnter password: \nVerify password: \n```\n생성된값 (argon 어쩌고..)을 복사  \n\n`-` 3단계: 환경설정 \n\n```default\njupyter notebook --generate-config\nnano /home/cgb/.jupyter/jupyter_notebook_config.py\n```\n\n아이피주소와 패스워드를 바꾼다. (port는 선택, browser도 선택 ) \n\n```default\nc.NotebookApp.open_browser = False\nc.NotebookApp.ip = '192.168.0.4'\nc.NotebookApp.port = 1307\nc.NotebookApp.password = ''\n```\n여기에서 `192.168.0.4` 는 내부아이피다. 고정아피이가 있다면 고정아이피 주소를 쓰면 된다.  \n\n> Tip: 주피터노트북과 랩을 양쪽으로 셋팅후 주피터 노트북으로 실행하면 2개를 모두 쓸 수 있음 \n\n# R설치ver1: (base)에 설치 \n\n`-` 설치전: 기존의 R 삭제 \n\n```default\nconda remove r-base -y \nsudo apt-get remove r-base-core \nsudo apt purge r-base* r-recommended r-cran-*\nsudo apt autoremove\n```\n\n`-` [R설치전 준비작업](https://cran.r-project.org/bin/linux/ubuntu/fullREADME.html): 나노에디터를 키고 /etc/apt/sources.list를 연다. \n\n```default\nsudo nano /etc/apt/sources.list\n```\n\n화살표로 이동하여 맨아래로 간뒤에 아래중 하나를 추가한다. (나는 focal-cran40으로 추가함)\n\n```default\ndeb https://cloud.r-project.org/bin/linux/ubuntu impish-cran40/\ndeb https://cloud.r-project.org/bin/linux/ubuntu hirsute-cran40/\ndeb https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/\ndeb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran40/\ndeb https://cloud.r-project.org/bin/linux/ubuntu xenial-cran40/\n```\n\n저장후 나노에디터 종료. 그리고 아래를 실행. \n\n```default\nsudo apt-get update\n```\n\n경우에 따라서 아래와 같은 에러메시지가 뜰 수 있다. \n\n```default\n...\nW: GPG error: https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/ InRelease: The following signatures couldn't be verified because the public key is not available: NO_PUBKEY 51716619E084DAB9 \n...\n```\n\n공개키가 없어서 생기는 에러이므로 아래와 같이 가져온다. \n\n```default\nwget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | sudo tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc\nsudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9\n#sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 51716619E084DAB9\n```\n\n그리고 다시 아래를 실행\n\n```default\nsudo apt-get update\n```\n\n에러가 없이 뭔가 마무리 되어야한다. \n\n```default\n(base) cgb3@cgb3:~$ sudo apt-get update\nIgn:1 http://linux.dropbox.com/ubuntu disco InRelease\nHit:2 http://security.ubuntu.com/ubuntu focal-security InRelease  \nHit:3 http://kr.archive.ubuntu.com/ubuntu focal InRelease                                 \nHit:4 http://ppa.launchpad.net/graphics-drivers/ppa/ubuntu focal InRelease                \nHit:5 http://linux.dropbox.com/ubuntu disco Release                 \nGet:6 https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/ InRelease [3,622 B]\nHit:8 http://kr.archive.ubuntu.com/ubuntu focal-updates InRelease\nGet:9 https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/ Packages [46.4 kB]\nHit:10 http://kr.archive.ubuntu.com/ubuntu focal-backports InRelease\nFetched 50.0 kB in 1s (36.5 kB/s)                   \nReading package lists... Done\n```\n\n`-` R설치 \n\n```default\nwget http://security.ubuntu.com/ubuntu/pool/main/i/icu/libicu66_66.1-2ubuntu2_amd64.deb\nsudo dpkg -i libicu66_66.1-2ubuntu2_amd64.deb\nsudo apt-get install r-base\n```\n\n`-` tidyverse 설치 (R studio 설치전에 tidyverse 설치해야함)\n\n`-` Rstudio 설치: <https://www.rstudio.com/products/rstudio/download-server/debian-ubuntu/> \n\n> 우분투22로 설정할것!!\n\n```default\nsudo apt remove rstudio-server\nsudo apt-get install gdebi-core\nwget https://download2.rstudio.org/server/jammy/amd64/rstudio-server-2022.12.0-353-amd64.deb\nsudo gdebi rstudio-server-2022.12.0-353-amd64.deb\n```\n\n`-` Rstudio를 설치하면 `~/R/x86_64-conda-linux-gnu-library/4.1`이 새로 생성된다. \n\n- Rstudio에서 설치한 패키지는 이 폴더에 저장된다. \n\n`-` 주피터와 R커널 연결 \n\n```default\nR # sudo R \ninstall.packages(\"IRkernel\")\nIRkernel::installspec()\n```\n\n# R설치ver2: (py38r40)에 설치 \n\n`-` R설치 \n\n```default\n(py38r40) conda install -c conda-forge r-essentials=4.0\n```\n\n이러면 콘다환경에는 R이 깔리고 base에는 R이 깔리지 않는다. \n\n`-` 커널연결 \n\n콘다환경에서 R을 실행한다. Rstudio가 아니라 커맨드에서 R을 실행해야한다. 그리고 아래를 실행하면 주피터랩과 R환경이 연결된다. \n\n```R\nIRkernel::installspec()\n```\n\n이제 주피터랩에서 R kernel을 사용할 수 있다. \n\n# 가상환경에서 Rstudio server 설치 (어려움) \n\n`-` 이제 Rstudio server를 설치하는 방법을 다룬다. \n\n\n\n`-` 먼저 Rstudio를 설치한다. 참고로 Rstudio server 설치하는법은 [여기](https://rstudio.com/products/rstudio/download-server/debian-ubuntu/)를 참고하라. 요약하면 터미널에서 아래3줄을 입력하기만 하면된다. \n\n```default\n(py38r40) sudo apt-get install gdebi-core\n(py38r40) wget https://download2.rstudio.org/server/bionic/amd64/rstudio-server-1.2.5033-amd64.deb\n(py38r40) sudo gdebi rstudio-server-1.2.5033-amd64.deb\n```\n\n> Warning: Rstudio 1.3x 이상을 설치하지말고 1.2x를 설치해야 한다. 이상하게 1.3x이상은 후에 서술할 Gregor Strurm가 그의 깃허브에서 제안하는 방식이 잘 동작하지 않았다. 이는 알려진 문제였고 이를 해결하는 해결책을 서술한 스레드가 있어보이긴 했지만 나는 그냥 Rstudio 1.2x를 설치하고 쓰는 것을 선택했다. \n\n> Note: 이미 rstudio server 가 다른버전으로 깔려있다면 `sudo apt remove rstudio-server` 를 통하여 삭제하고 설치하자. \n\n`-` 이제 Rstudio 설치가 끝났다. 설치된 Rstudio를 아나콘다 가상환경에 설치된 R과 연결해보자. 우선 아래를 실행한다. \n\n```default\n(py38r40) sudo apt install uuid\n(py38r40) sudo apt install git\n(py38r40) git clone https://github.com/grst/rstudio-server-conda.git\n```\n\n위에 두줄은 [Gregor Sturm](https://github.com/grst/rstudio-server-conda)이 만든 어떤 프로그램을 쓰기 위한 사전준비작업이다. 마지막줄을 실행하면 [Gregor Sturm](https://github.com/grst/rstudio-server-conda)이 만든 프로그램이 다운받아진다. 이게 프로그램 설치가 완료된것이다. 이제 컴퓨터 껐다 킬때마다 아래를 실행한다. \n\n```default\n(py38r40) ./rstudio-server-conda/local/start_rstudio_server.sh 8787 # use any free port number here. \n```\n\n이제 `192.168.0.4:8787` 따위의 주소로 접속하면 `Rstudio`를 쓸 수 있다. 참고로 system-wide Rstudio server를 죽여야 할 때가 있다. 그럴땐 아래 명령을 치면 된다. \n\n```default\n(py38r40) sudo systemctl disable rstudio-server.service\n(py38r40) sudo systemctl stop rstudio-server.service\n```\n\n# 자주 설치하는 패키지 리스트\n\n`-` 아래를 미리 깔아두자.. \n\n```default\n# conda install -c conda-forge notebook\nconda install pytorch torchvision torchaudio cudatoolkit=11.3 -c pytorch\nconda install -c conda-forge plotly \npip install plotnine\npip install seaborn\npip install opencv-python\npip install folium\npip install pandas_datareader\nconda install -c conda-forge r-essentials=4 \npip install rpy2\nconda install -c conda-forge python-graphviz\n```\n\n`-` tensorflow-gpu 는 현재(2022-03-06) python=3.10 에서 동작함 \n\n```default\nconda create -n py310 python=3.10 \nconda activate py310 \nconda install -c conda-forge tensorflow-gpu \n```\n\n`-` 아래를 설치하면 좋음 \n\n```default\nsudo apt install mc \n```\n\n# 터미널 예쁘게 만들기 \n\n`-` zsh 설치 + oh my zsh 설치 \n```default\nsudo install zsh \nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n```\n\n`-` 테마변경 \n\n(1) .zshrc 파일 열기 \n\n```default\nnano ~/.zshrc \n```\n\n(2) 아래의 내용 수정 \n\n```default\n...\nZSH_THEME=\"agnoster\"\n...\n```\n\n`-` 색상변경\n\n(1) 아래의 파일 열기 \n\n```default\ncd ~/.oh-my-zsh/themes/\nnano agnoster.zsh-theme  \n```\n\n(2) 내용수정 \n\n```default\n...\nprompt_dir() {\n  prompt_segment 39d $CURRENT_FG '%~'\n}\n...\n```\n\n# sublime text and TeX (개발용 서버일 경우 생략 가능)\n\n`-` 'Ubuntu Software'에 가서 'sublime Text'를 치면 다운받을 수 있다. 다운받은뒤에 'file' -> 'open folder'를 활용하여 깃허브의 로칼저장소를 열어두면 편리하다. \n\n`-` 아래를 실행하여 TeX을 깐다. \n```default\nsudo apt install texlive-full\n```\n\n`-` 이제 sublime과 latex을 연결하여보자. [여기](https://latextools.readthedocs.io/en/latest/install/#requirements-and-setup)를 참고하자. (1) sublime을 키고 '컨트롤+쉬프트+p'를 눌러 'Install Package Control' 선택 (2) 다시 '컨트롤+쉬프트+p' 를 눌러 'Package Control: Install Package'를 실행 (3) 그러면 바로 검색창이 나오는데 거기서 'LaTeXTools'를 입력해서 실행 (4) 다시 '컨트롤+쉬프트+p'를 누르고 'LaTeXTools: Check system' 선택. 모두 'available'이 나오면 잘 설치된 것이다. \n\n`-` `*.tex`파일을 열고 '컨트롤+b'를 누르자. 처음이면 어떤 메뉴들이 보일텐데 그냥 'Latex'을 선택하자. 그러면 코딩결과가 pdf로 나온다. \n\n`-` (수식미리보기) 'Perferences' > 'Packages Setting' > 'LaTeXTools' > 'Settings-User'를 선택한다. '93번째라인'에 'preview_math_mode'를 \"all\"로 바꾼다. 그러면 수식들이 미리 출력된다. 그외에도 자유롭게 셋팅을 조정할 수 있다. 원래셋팅은  'Perferences' > 'Packages Setting' > 'LaTeXTools' > 'Settings-Defaults' 에 있다. \n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"reference-location":"margin","toc":true,"output-file":"2000-01-01-(메모) 우분투 포맷 및 개발용 서버 셋팅(old).html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.520","theme":"cosmo","title-block-banner":false,"comments":{"utterances":{"repo":"miruetoto/yechan3"}},"bibliography":["ref.bib"],"cap-location":"bottom","citation-location":"margin","code-copy":true,"title":"(메모) 우분투 포맷 및 개발용 서버 셋팅 (old)","author":"신록예찬","date":"01/01/2000"},"extensions":{"book":{"multiFile":true}}},"ipynb":{"identifier":{"display-name":"Jupyter","target-format":"ipynb","base-format":"ipynb"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"png","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"ipynb","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"default-image-extension":"png","to":"ipynb","reference-location":"margin","output-file":"2000-01-01-(메모) 우분투 포맷 및 개발용 서버 셋팅(old).ipynb"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"title-block-banner":false,"comments":{"utterances":{"repo":"miruetoto/yechan3"}},"bibliography":["ref.bib"],"cap-location":"bottom","citation-location":"margin","title":"(메모) 우분투 포맷 및 개발용 서버 셋팅 (old)","author":"신록예찬","date":"01/01/2000"}}},"projectFormats":["html"]}