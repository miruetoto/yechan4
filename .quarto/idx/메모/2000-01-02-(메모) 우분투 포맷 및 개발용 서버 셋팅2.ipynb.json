{"title":"(메모) 우분투 포맷 및 개발용 서버 셋팅2","markdown":{"yaml":{"title":"(메모) 우분투 포맷 및 개발용 서버 셋팅2","author":"신록예찬","date":"01/02/2000"},"headingText":"About this doc","containsRefs":false,"markdown":"\n\n\n`-` 우분투에서 여러가지 개발환경을 설정하는 방법을 포스팅 (시대가 너무 바뀌어서 새로정리)\n\n# 1. 우분투설치 \n\n`-` Nomal installation $\\to$ Erase disk and install Ubuntu, Continue\n\n::: {.panel-tabset}\n### step1 \n\n![](attachment:b4ca5cae-0949-45aa-a420-a3856a528b39.png)\n\n### step2\n\n![](attachment:3b864fd3-924e-4a54-935a-732d7af906ed.png)\n\n### step3\n\n![](attachment:791bf0ab-7328-4f0b-96cd-cb44a7c49432.png)\n:::\n\n# 2. 네트워크 설정\n\n`-` `?`표시있는 아이콘 $\\to$ Wired Connected $\\to$ Wired Settings $\\to$ Connection의 설정 $\\to$ IPv4 $\\to$ Manual $\\to$ Address, Netmask, Gateway, DNS 설정 $\\to$ 네트워크 토글 \n\n\n# 3. 그래픽카드 드라이버설치\n\n`-` 전체적인 내용은 [여기](https://gist.github.com/bendangnuksung/981408031699e0ddc50a6f6fdcf185c2)를 참고하자. \n\n`-` 준비작업 \n\n```bash\nsudo apt update \nsudo apt install gcc\nsudo apt install build-essential\n```\n\n`-` 우선 `gedit`를 열고 아래를 복사해서 붙여넣는다. \n\n```bash\nblacklist nouveau\noptions nouveau modeset=0\n```\n\n파일이름을 `blacklist-nouveau.conf`로 `home`에 저장\n\n`-` 루트권한획득 \n\n```bash\nsudo -i\n```\n아이디와 비밀번호를 입력하고 루트권한을 얻는다. \n\n`-` 아래를 입력한다. \n\n```bash\nsudo cp /home/cgb2/blacklist-nouveau.conf /etc/modprobe.d\nsudo update-initramfs -u\nsudo reboot \n```\n\n`-` 그래픽카드 다운로드: 드라이버 설치파일을 다운받는다. [앤비디아공식홈페이지](https://www.geforce.com/drivers)에서 다운받자. OS를 리눅스 64-bit으로 선택하고 검색을 누르면 다운받아진다. \n\n`-` 그래픽키다 설치: 다운받은뒤에는 파일이 있는 폴더로 이동하여 \n\n```bash\nchmod +x NVIDIA-Linux-x86_64-410.78.run\n```\n\n를 실행하자. 보통 `NVI`까지치고 적당히 `탭`을 누르면 알아서 뒷부분이 완성된다. 이 과정은 추후에 \n드라이버를 실행할수 있도록 권한을 풀어두는 것이다. 그리고 아래를 실행한다.\n\n```bash\nsudo ./NVIDIA-Linux-x86_64-410.78.run\n```\n\n그 다음 드라이버가 잘 설치되었는지 확인한다. \n\n```bash\nnvidia-smi\n```\n\n# 4. ssh연결 \n\n`-` 처음에 ssh를 연결하기위해서는 연결**당하는** 컴퓨터에 가서 아래를 실행해야 한다. \n\n```bash\nsudo apt install openssh-server\n```\n\n***22번포트 우회하기***\n\n`-` step1: `/etc/ssh/sshd_config` 파일을 연다. \n\n```bash\nsudo vi /etc/ssh/sshd_config \n```\n\n`-` step2: Port 22 라고 된 부분의 주석을 풀고 원하는 포트번호 설정 \n\n```bash\n...\n\n#Port 22\n#AddressFamily any\n#ListenAddress 0.0.0.0\n#ListenAddress ::\n\n...\n```\n\n\n\n\n`-` step3: 수정내용을 적용 \n\n```bash\nsudo systemctl restart ssh.service\n```\n\n`-` step4: 수정한 포트로 ssh접속 \n\n# 5. 아나콘다\n\n`-` 다운로드: <https://www.anaconda.com/download>\n\n`-` (아나콘다 설치) 아나콘다를 다운받은 폴더로 가서 아래와 같이 실행한다. \n\n```bash\nbash Anaconda3-2019.03-Linux-x86_64.sh\n```\n\n대충 `bash Ana` 정도까지만 치고 `tab`을 누르면 알아서 완성된다. \n\n\n# 6. 원격제어\n\n## A. 주피터 원격제어 설정\n\n`-` 설정파일 생성 \n\n```bash\njupyter notebook --generate-config\n```\n\n`-` 패스워드 설정 \n\n```bash\njupyter notebook password\n## 패스워드 치고\n## 확인해야함\n```\n\n`-` 설정파일을 열고\n\n```bash\nvi /home/cgb2/.jupyter/jupyter_notebook_config.py\n```\n\n아래의 내용을 수정한다.\n\n```default\nc.??????App.ip = '192.168.0.4'\nc.??????App.port = 1306\nc.??????App.allow_origin = '*'\nc.??????App.allow_remote_access = True\nc.??????App.allow_root = True\n```\n\n## B. vscode\n\n`-` ref: https://code.visualstudio.com/docs/remote/tunnels\n\n`-` 아래를 실행하면 된다. \n\n```bash\ncurl -Lk 'https://code.visualstudio.com/sha/download?build=stable&os=cli-alpine-x64' --output vscode_cli.tar.gz\ntar -xf vscode_cli.tar.gz\n```\n\n`-` 이후로는 `./code tunnel`을 실행할것!\n\n`-` 백엔드에서 하려면 \n\n```bash\nnohup ./code tunnel > /dev/null 2>&1 &\n```\n\n`-` 패키지설치\n\n![](attachment:95f7400d-82dd-45a5-913f-d83bd57fcbd3.png)\n\n# 7. Rstudio\n\n`-` 가상환경만듦 \n\n```bash\n(base) conda create -n r \n(base) conda activate r \n(r) conda install -c conda-forge r-essentials\n```\n\n`-` 아래를 이용하여 [Rstudio](https://rstudio.com/products/rstudio/download-server/debian-ubuntu/)를 설치 (base환경인지 r환경인지는 무의미) \n\n```bash\nsudo apt remove rstudio-server # 이미 설치된 경우 이 명령을 통하여 삭제하고 설치할 것 \nsudo apt-get install gdebi-core\nwget https://download2.rstudio.org/server/jammy/amd64/rstudio-server-2024.04.2-764-amd64.deb # 우분투 22는 jammy!!!\nsudo gdebi rstudio-server-2024.04.2-764-amd64.deb\n```\n\n`-` `grst`가 만든 `rstudio-server-conda`를 클론 \n\n```bash\ngit clone https://github.com/grst/rstudio-server-conda.git\n```\n\n`-` 내용을 수정\n\n```{.bash filename=~/rstudio-server-conda/local/start_rstudio_server.sh}\n\n아래쪽으로 쭉 가면...\n\n/usr/lib/rstudio-server/bin/rserver --server-daemonize=0 \\\n  --www-port=????? \\ ### <--- 여기 수정!!!!!\n  --secure-cookie-key-file=$COOKIE_KEY_PATH \\\n  --server-pid-file=\"$CWD/rstudio-server.pid\" \\\n  --server-data-dir=\"$CWD/rstudio-server\" \\\n  --rsession-which-r=$(which R) \\\n  --rsession-ld-library-path=$CONDA_PREFIX/lib \\\n  --rsession-path=\"$CWD/rsession.sh\" \\\n  --server-user $USER \\\n  --database-config-file \"$CWD/database.conf\" \\\n  $REVOCATION_LIST_PAR\n```\n\n`-` `start_rstudio_server.sh`를 실행 \n\n# 8. 유용한 콘다 개발환경 \n\n## \bA. R+Python 사용가능한 개발환경 \n\n\n`-` 아래를 실행\n\n```bash\n(base) conda create -n r \n(base) conda activate r\n(r) conda install -c conda-forge r-essentials\n(r) conda install -c conda-forge plotly\n(r) conda install -c conda-forge rpy2\n```\n\n`-` 여기에서 `conda install -c conda-forge r-essentials`로 인하여 R, Python, Jupyter 가 모두 최신버전으로 설치된다. \n\n`-` 또한 R에는 이미 `tidyverse`, `IRkernel` 등의 패키지가 기본으로 깔려있다. \n\n`-` 커널연결 \n\n콘다환경에서 R을 실행한다. Rstudio가 아니라 커맨드에서 R을 실행해야한다. 그리고 아래를 실행하면 주피터랩과 R환경이 연결된다. \n\n```R\nIRkernel::installspec()\n```\n\n이제 주피터랩에서 R kernel을 사용할 수 있다. \n\n`-` R은 아래의 경로에 설치되어있다. \n\n![](attachment:e908cc01-9118-42c5-a015-7b55368189bb.png)\n\n`-` 실행파일은 bin 폴더에 있다. \n\n![](attachment:78fd820b-f6e2-4239-b090-c33183a90abb.png)\n\n`(base)` 환경이지만 이곳의 실행파일에 직접 접근하여 실행할 수도 있다. \n\n![](attachment:d6264647-bbbf-437d-a23b-f3158ea5a23a.png)\n\n`-` 설치한 패키지는 library 폴더에 있다. /// `EPT`도 보인다..\n\n![](attachment:bf7d429d-97be-4102-b097-720d205ac9ac.png)\n\n## B. torch\n\n\n`-` 아래를 실행\n\n```bash\n(base) conda create -n torch\n(base) conda activate torch\n#---#\n(torch) conda install -c conda-forge notebook \n(torch) conda install -c conda-forge plotly \n#---torch--#\n(torch) conda install pytorch torchvision torchaudio pytorch-cuda=12.1 -c pytorch -c nvidia\n#---pyg---#\n#(torch) conda install pytorch torchvision torchaudio pytorch-cuda=12.1 -c pytorch -c nvidia\n(torch) conda install pyg -c pyg \n#---stgcn---#\n#(torch) conda install pytorch torchvision torchaudio pytorch-cuda=12.1 -c pytorch -c nvidia\n#(torch) conda install pyg -c pyg \n(torch) sudo apt install gcc\n(torch) sudo apt install build-essential\n(torch) pip install torch-geometric-temporal\n#---ctgan---#\n#(torch) conda install pytorch torchvision torchaudio pytorch-cuda=12.1 -c pytorch -c nvidia\n(torch) conda install -c pytorch -c conda-forge ctgan  \n#---gym---#\n#(torch) conda install pytorch torchvision torchaudio pytorch-cuda=12.1 -c pytorch -c nvidia\n(torch) pip install gymnasium \n#(torch) sudo apt install gcc\n#(torch) sudo apt install build-essential\n(torch) sudo apt-get install swig\n(torch) pip install gymnasium[box2d]\n```\n\n**refs**\n\n- PyTorch: <https://pytorch.org/get-started/locally/>\n- PyG: <https://pytorch-geometric.readthedocs.io/en/latest/install/installation.html>\n- PyTorch Geometric Temporal^[이 패키지는 꼭 PyG 이후에 설치할것]: <https://pytorch-geometric-temporal.readthedocs.io/en/latest/notes/installation.html>\n- CTGAN: <https://github.com/sdv-dev/CTGAN>\n- Gymnasium: <https://gymnasium.farama.org/index.html>^[설치방법은 따로 없음..]\n\n# 9. 설치하면 좋은것들 \n\n`-` 데이터과학을 위한 패키지들\n\n```bash\npip install plotnine\npip install seaborn\npip install opencv-python\npip install folium\npip install pandas_datareader\n```\n\n`-` 아래를 설치하면 좋음 \n\n```bash\nsudo apt install mc \n```\n\n# Appendix\n\n## `A1`. R 삭제하는 방법 \n\n`-` R 삭제 \n\n```bash\nconda remove r-base -y \nsudo apt-get remove r-base-core \nsudo apt purge r-base* r-recommended r-cran-*\nsudo apt autoremove\n```\n\n## `A2`. R 패키지 설치 \n\n`-` 주피터등에서 직접설치 \n\n`-` conda를 이용한 설치 \n\n```bash\nconda install -c r package-name\n```\n\n- <https://docs.anaconda.com/free/anaconda/reference/packages/r-language-pkg-docs/>\n\n## `A3`. 우분투를 주컴퓨터로 사용할 경우 한글설정\n\n`-` 아래와 같이 커맨드에 친다. \n\n```bash\nibus-setup\n```\n\n이걸 치면 `IBus Preferences` 라는 창이 나오는데 여기에서 (1) `Input Method` 탭 클릭 (2) `Add` 버튼 클릭 (3) `Korean` 선택 (4) `Hangul` 선택을 한다. \n\n`-` 위의 단계에서 `Korean`이 안보이면 `Language Support`로 가서 한국어팩을 설치하고 리부팅 하면 된다. (보통 실행하자마자 알아서 설치되더라.. 설치가 안되면 `Install / Remove Languages...` 이라는 탭을 클릭해서 설치하자) 리부팅을 꼭 해야한다는 것에 주의하자. \n\n`-` 이제 `Region & Language`로 가서 설정하면 된다. \n\n## `A4`. sublime text and TeX\n\n`-` 'Ubuntu Software'에 가서 'sublime Text'를 치면 다운받을 수 있다. 다운받은뒤에 'file' -> 'open folder'를 활용하여 깃허브의 로칼저장소를 열어두면 편리하다. \n\n`-` 아래를 실행하여 TeX을 깐다. \n\n```bash\nsudo apt install texlive-full\n```\n\n`-` 이제 sublime과 latex을 연결하여보자. [여기](https://latextools.readthedocs.io/en/latest/install/#requirements-and-setup)를 참고하자. (1) sublime을 키고 '컨트롤+쉬프트+p'를 눌러 'Install Package Control' 선택 (2) 다시 '컨트롤+쉬프트+p' 를 눌러 'Package Control: Install Package'를 실행 (3) 그러면 바로 검색창이 나오는데 거기서 'LaTeXTools'를 입력해서 실행 (4) 다시 '컨트롤+쉬프트+p'를 누르고 'LaTeXTools: Check system' 선택. 모두 'available'이 나오면 잘 설치된 것이다. \n\n`-` `*.tex`파일을 열고 '컨트롤+b'를 누르자. 처음이면 어떤 메뉴들이 보일텐데 그냥 'Latex'을 선택하자. 그러면 코딩결과가 pdf로 나온다. \n\n`-` (수식미리보기) 'Perferences' > 'Packages Setting' > 'LaTeXTools' > 'Settings-User'를 선택한다. '93번째라인'에 'preview_math_mode'를 \"all\"로 바꾼다. 그러면 수식들이 미리 출력된다. 그외에도 자유롭게 셋팅을 조정할 수 있다. 원래셋팅은  'Perferences' > 'Packages Setting' > 'LaTeXTools' > 'Settings-Defaults' 에 있다. \n\n## `A5`. 터미널 예쁘게 만들기 \n\n`-` zsh 설치 + oh my zsh 설치 \n\n```bash\nsudo install zsh \nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n```\n\n`-` 테마변경 \n\n(1) .zshrc 파일 열기 \n\n```bash\nnano ~/.zshrc \n```\n\n(2) 아래의 내용 수정 \n\n```bash\n...\nZSH_THEME=\"agnoster\"\n...\n```\n\n`-` 색상변경\n\n(1) 아래의 파일 열기 \n\n```bash\ncd ~/.oh-my-zsh/themes/\nnano agnoster.zsh-theme  \n```\n\n(2) 내용수정 \n\n```bash\n...\nprompt_dir() {\n  prompt_segment 39d $CURRENT_FG '%~'\n}\n...\n```\n","srcMarkdownNoYaml":"\n\n# About this doc\n\n`-` 우분투에서 여러가지 개발환경을 설정하는 방법을 포스팅 (시대가 너무 바뀌어서 새로정리)\n\n# 1. 우분투설치 \n\n`-` Nomal installation $\\to$ Erase disk and install Ubuntu, Continue\n\n::: {.panel-tabset}\n### step1 \n\n![](attachment:b4ca5cae-0949-45aa-a420-a3856a528b39.png)\n\n### step2\n\n![](attachment:3b864fd3-924e-4a54-935a-732d7af906ed.png)\n\n### step3\n\n![](attachment:791bf0ab-7328-4f0b-96cd-cb44a7c49432.png)\n:::\n\n# 2. 네트워크 설정\n\n`-` `?`표시있는 아이콘 $\\to$ Wired Connected $\\to$ Wired Settings $\\to$ Connection의 설정 $\\to$ IPv4 $\\to$ Manual $\\to$ Address, Netmask, Gateway, DNS 설정 $\\to$ 네트워크 토글 \n\n\n# 3. 그래픽카드 드라이버설치\n\n`-` 전체적인 내용은 [여기](https://gist.github.com/bendangnuksung/981408031699e0ddc50a6f6fdcf185c2)를 참고하자. \n\n`-` 준비작업 \n\n```bash\nsudo apt update \nsudo apt install gcc\nsudo apt install build-essential\n```\n\n`-` 우선 `gedit`를 열고 아래를 복사해서 붙여넣는다. \n\n```bash\nblacklist nouveau\noptions nouveau modeset=0\n```\n\n파일이름을 `blacklist-nouveau.conf`로 `home`에 저장\n\n`-` 루트권한획득 \n\n```bash\nsudo -i\n```\n아이디와 비밀번호를 입력하고 루트권한을 얻는다. \n\n`-` 아래를 입력한다. \n\n```bash\nsudo cp /home/cgb2/blacklist-nouveau.conf /etc/modprobe.d\nsudo update-initramfs -u\nsudo reboot \n```\n\n`-` 그래픽카드 다운로드: 드라이버 설치파일을 다운받는다. [앤비디아공식홈페이지](https://www.geforce.com/drivers)에서 다운받자. OS를 리눅스 64-bit으로 선택하고 검색을 누르면 다운받아진다. \n\n`-` 그래픽키다 설치: 다운받은뒤에는 파일이 있는 폴더로 이동하여 \n\n```bash\nchmod +x NVIDIA-Linux-x86_64-410.78.run\n```\n\n를 실행하자. 보통 `NVI`까지치고 적당히 `탭`을 누르면 알아서 뒷부분이 완성된다. 이 과정은 추후에 \n드라이버를 실행할수 있도록 권한을 풀어두는 것이다. 그리고 아래를 실행한다.\n\n```bash\nsudo ./NVIDIA-Linux-x86_64-410.78.run\n```\n\n그 다음 드라이버가 잘 설치되었는지 확인한다. \n\n```bash\nnvidia-smi\n```\n\n# 4. ssh연결 \n\n`-` 처음에 ssh를 연결하기위해서는 연결**당하는** 컴퓨터에 가서 아래를 실행해야 한다. \n\n```bash\nsudo apt install openssh-server\n```\n\n***22번포트 우회하기***\n\n`-` step1: `/etc/ssh/sshd_config` 파일을 연다. \n\n```bash\nsudo vi /etc/ssh/sshd_config \n```\n\n`-` step2: Port 22 라고 된 부분의 주석을 풀고 원하는 포트번호 설정 \n\n```bash\n...\n\n#Port 22\n#AddressFamily any\n#ListenAddress 0.0.0.0\n#ListenAddress ::\n\n...\n```\n\n\n\n\n`-` step3: 수정내용을 적용 \n\n```bash\nsudo systemctl restart ssh.service\n```\n\n`-` step4: 수정한 포트로 ssh접속 \n\n# 5. 아나콘다\n\n`-` 다운로드: <https://www.anaconda.com/download>\n\n`-` (아나콘다 설치) 아나콘다를 다운받은 폴더로 가서 아래와 같이 실행한다. \n\n```bash\nbash Anaconda3-2019.03-Linux-x86_64.sh\n```\n\n대충 `bash Ana` 정도까지만 치고 `tab`을 누르면 알아서 완성된다. \n\n\n# 6. 원격제어\n\n## A. 주피터 원격제어 설정\n\n`-` 설정파일 생성 \n\n```bash\njupyter notebook --generate-config\n```\n\n`-` 패스워드 설정 \n\n```bash\njupyter notebook password\n## 패스워드 치고\n## 확인해야함\n```\n\n`-` 설정파일을 열고\n\n```bash\nvi /home/cgb2/.jupyter/jupyter_notebook_config.py\n```\n\n아래의 내용을 수정한다.\n\n```default\nc.??????App.ip = '192.168.0.4'\nc.??????App.port = 1306\nc.??????App.allow_origin = '*'\nc.??????App.allow_remote_access = True\nc.??????App.allow_root = True\n```\n\n## B. vscode\n\n`-` ref: https://code.visualstudio.com/docs/remote/tunnels\n\n`-` 아래를 실행하면 된다. \n\n```bash\ncurl -Lk 'https://code.visualstudio.com/sha/download?build=stable&os=cli-alpine-x64' --output vscode_cli.tar.gz\ntar -xf vscode_cli.tar.gz\n```\n\n`-` 이후로는 `./code tunnel`을 실행할것!\n\n`-` 백엔드에서 하려면 \n\n```bash\nnohup ./code tunnel > /dev/null 2>&1 &\n```\n\n`-` 패키지설치\n\n![](attachment:95f7400d-82dd-45a5-913f-d83bd57fcbd3.png)\n\n# 7. Rstudio\n\n`-` 가상환경만듦 \n\n```bash\n(base) conda create -n r \n(base) conda activate r \n(r) conda install -c conda-forge r-essentials\n```\n\n`-` 아래를 이용하여 [Rstudio](https://rstudio.com/products/rstudio/download-server/debian-ubuntu/)를 설치 (base환경인지 r환경인지는 무의미) \n\n```bash\nsudo apt remove rstudio-server # 이미 설치된 경우 이 명령을 통하여 삭제하고 설치할 것 \nsudo apt-get install gdebi-core\nwget https://download2.rstudio.org/server/jammy/amd64/rstudio-server-2024.04.2-764-amd64.deb # 우분투 22는 jammy!!!\nsudo gdebi rstudio-server-2024.04.2-764-amd64.deb\n```\n\n`-` `grst`가 만든 `rstudio-server-conda`를 클론 \n\n```bash\ngit clone https://github.com/grst/rstudio-server-conda.git\n```\n\n`-` 내용을 수정\n\n```{.bash filename=~/rstudio-server-conda/local/start_rstudio_server.sh}\n\n아래쪽으로 쭉 가면...\n\n/usr/lib/rstudio-server/bin/rserver --server-daemonize=0 \\\n  --www-port=????? \\ ### <--- 여기 수정!!!!!\n  --secure-cookie-key-file=$COOKIE_KEY_PATH \\\n  --server-pid-file=\"$CWD/rstudio-server.pid\" \\\n  --server-data-dir=\"$CWD/rstudio-server\" \\\n  --rsession-which-r=$(which R) \\\n  --rsession-ld-library-path=$CONDA_PREFIX/lib \\\n  --rsession-path=\"$CWD/rsession.sh\" \\\n  --server-user $USER \\\n  --database-config-file \"$CWD/database.conf\" \\\n  $REVOCATION_LIST_PAR\n```\n\n`-` `start_rstudio_server.sh`를 실행 \n\n# 8. 유용한 콘다 개발환경 \n\n## \bA. R+Python 사용가능한 개발환경 \n\n\n`-` 아래를 실행\n\n```bash\n(base) conda create -n r \n(base) conda activate r\n(r) conda install -c conda-forge r-essentials\n(r) conda install -c conda-forge plotly\n(r) conda install -c conda-forge rpy2\n```\n\n`-` 여기에서 `conda install -c conda-forge r-essentials`로 인하여 R, Python, Jupyter 가 모두 최신버전으로 설치된다. \n\n`-` 또한 R에는 이미 `tidyverse`, `IRkernel` 등의 패키지가 기본으로 깔려있다. \n\n`-` 커널연결 \n\n콘다환경에서 R을 실행한다. Rstudio가 아니라 커맨드에서 R을 실행해야한다. 그리고 아래를 실행하면 주피터랩과 R환경이 연결된다. \n\n```R\nIRkernel::installspec()\n```\n\n이제 주피터랩에서 R kernel을 사용할 수 있다. \n\n`-` R은 아래의 경로에 설치되어있다. \n\n![](attachment:e908cc01-9118-42c5-a015-7b55368189bb.png)\n\n`-` 실행파일은 bin 폴더에 있다. \n\n![](attachment:78fd820b-f6e2-4239-b090-c33183a90abb.png)\n\n`(base)` 환경이지만 이곳의 실행파일에 직접 접근하여 실행할 수도 있다. \n\n![](attachment:d6264647-bbbf-437d-a23b-f3158ea5a23a.png)\n\n`-` 설치한 패키지는 library 폴더에 있다. /// `EPT`도 보인다..\n\n![](attachment:bf7d429d-97be-4102-b097-720d205ac9ac.png)\n\n## B. torch\n\n\n`-` 아래를 실행\n\n```bash\n(base) conda create -n torch\n(base) conda activate torch\n#---#\n(torch) conda install -c conda-forge notebook \n(torch) conda install -c conda-forge plotly \n#---torch--#\n(torch) conda install pytorch torchvision torchaudio pytorch-cuda=12.1 -c pytorch -c nvidia\n#---pyg---#\n#(torch) conda install pytorch torchvision torchaudio pytorch-cuda=12.1 -c pytorch -c nvidia\n(torch) conda install pyg -c pyg \n#---stgcn---#\n#(torch) conda install pytorch torchvision torchaudio pytorch-cuda=12.1 -c pytorch -c nvidia\n#(torch) conda install pyg -c pyg \n(torch) sudo apt install gcc\n(torch) sudo apt install build-essential\n(torch) pip install torch-geometric-temporal\n#---ctgan---#\n#(torch) conda install pytorch torchvision torchaudio pytorch-cuda=12.1 -c pytorch -c nvidia\n(torch) conda install -c pytorch -c conda-forge ctgan  \n#---gym---#\n#(torch) conda install pytorch torchvision torchaudio pytorch-cuda=12.1 -c pytorch -c nvidia\n(torch) pip install gymnasium \n#(torch) sudo apt install gcc\n#(torch) sudo apt install build-essential\n(torch) sudo apt-get install swig\n(torch) pip install gymnasium[box2d]\n```\n\n**refs**\n\n- PyTorch: <https://pytorch.org/get-started/locally/>\n- PyG: <https://pytorch-geometric.readthedocs.io/en/latest/install/installation.html>\n- PyTorch Geometric Temporal^[이 패키지는 꼭 PyG 이후에 설치할것]: <https://pytorch-geometric-temporal.readthedocs.io/en/latest/notes/installation.html>\n- CTGAN: <https://github.com/sdv-dev/CTGAN>\n- Gymnasium: <https://gymnasium.farama.org/index.html>^[설치방법은 따로 없음..]\n\n# 9. 설치하면 좋은것들 \n\n`-` 데이터과학을 위한 패키지들\n\n```bash\npip install plotnine\npip install seaborn\npip install opencv-python\npip install folium\npip install pandas_datareader\n```\n\n`-` 아래를 설치하면 좋음 \n\n```bash\nsudo apt install mc \n```\n\n# Appendix\n\n## `A1`. R 삭제하는 방법 \n\n`-` R 삭제 \n\n```bash\nconda remove r-base -y \nsudo apt-get remove r-base-core \nsudo apt purge r-base* r-recommended r-cran-*\nsudo apt autoremove\n```\n\n## `A2`. R 패키지 설치 \n\n`-` 주피터등에서 직접설치 \n\n`-` conda를 이용한 설치 \n\n```bash\nconda install -c r package-name\n```\n\n- <https://docs.anaconda.com/free/anaconda/reference/packages/r-language-pkg-docs/>\n\n## `A3`. 우분투를 주컴퓨터로 사용할 경우 한글설정\n\n`-` 아래와 같이 커맨드에 친다. \n\n```bash\nibus-setup\n```\n\n이걸 치면 `IBus Preferences` 라는 창이 나오는데 여기에서 (1) `Input Method` 탭 클릭 (2) `Add` 버튼 클릭 (3) `Korean` 선택 (4) `Hangul` 선택을 한다. \n\n`-` 위의 단계에서 `Korean`이 안보이면 `Language Support`로 가서 한국어팩을 설치하고 리부팅 하면 된다. (보통 실행하자마자 알아서 설치되더라.. 설치가 안되면 `Install / Remove Languages...` 이라는 탭을 클릭해서 설치하자) 리부팅을 꼭 해야한다는 것에 주의하자. \n\n`-` 이제 `Region & Language`로 가서 설정하면 된다. \n\n## `A4`. sublime text and TeX\n\n`-` 'Ubuntu Software'에 가서 'sublime Text'를 치면 다운받을 수 있다. 다운받은뒤에 'file' -> 'open folder'를 활용하여 깃허브의 로칼저장소를 열어두면 편리하다. \n\n`-` 아래를 실행하여 TeX을 깐다. \n\n```bash\nsudo apt install texlive-full\n```\n\n`-` 이제 sublime과 latex을 연결하여보자. [여기](https://latextools.readthedocs.io/en/latest/install/#requirements-and-setup)를 참고하자. (1) sublime을 키고 '컨트롤+쉬프트+p'를 눌러 'Install Package Control' 선택 (2) 다시 '컨트롤+쉬프트+p' 를 눌러 'Package Control: Install Package'를 실행 (3) 그러면 바로 검색창이 나오는데 거기서 'LaTeXTools'를 입력해서 실행 (4) 다시 '컨트롤+쉬프트+p'를 누르고 'LaTeXTools: Check system' 선택. 모두 'available'이 나오면 잘 설치된 것이다. \n\n`-` `*.tex`파일을 열고 '컨트롤+b'를 누르자. 처음이면 어떤 메뉴들이 보일텐데 그냥 'Latex'을 선택하자. 그러면 코딩결과가 pdf로 나온다. \n\n`-` (수식미리보기) 'Perferences' > 'Packages Setting' > 'LaTeXTools' > 'Settings-User'를 선택한다. '93번째라인'에 'preview_math_mode'를 \"all\"로 바꾼다. 그러면 수식들이 미리 출력된다. 그외에도 자유롭게 셋팅을 조정할 수 있다. 원래셋팅은  'Perferences' > 'Packages Setting' > 'LaTeXTools' > 'Settings-Defaults' 에 있다. \n\n## `A5`. 터미널 예쁘게 만들기 \n\n`-` zsh 설치 + oh my zsh 설치 \n\n```bash\nsudo install zsh \nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n```\n\n`-` 테마변경 \n\n(1) .zshrc 파일 열기 \n\n```bash\nnano ~/.zshrc \n```\n\n(2) 아래의 내용 수정 \n\n```bash\n...\nZSH_THEME=\"agnoster\"\n...\n```\n\n`-` 색상변경\n\n(1) 아래의 파일 열기 \n\n```bash\ncd ~/.oh-my-zsh/themes/\nnano agnoster.zsh-theme  \n```\n\n(2) 내용수정 \n\n```bash\n...\nprompt_dir() {\n  prompt_segment 39d $CURRENT_FG '%~'\n}\n...\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"reference-location":"margin","toc":true,"output-file":"2000-01-02-(메모) 우분투 포맷 및 개발용 서버 셋팅2.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.520","theme":"cosmo","title-block-banner":false,"comments":{"utterances":{"repo":"miruetoto/yechan3"}},"bibliography":["ref.bib"],"cap-location":"bottom","citation-location":"margin","code-copy":true,"title":"(메모) 우분투 포맷 및 개발용 서버 셋팅2","author":"신록예찬","date":"01/02/2000"},"extensions":{"book":{"multiFile":true}}},"ipynb":{"identifier":{"display-name":"Jupyter","target-format":"ipynb","base-format":"ipynb"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"png","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"ipynb","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"default-image-extension":"png","to":"ipynb","reference-location":"margin","output-file":"2000-01-02-(메모) 우분투 포맷 및 개발용 서버 셋팅2.ipynb"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"title-block-banner":false,"comments":{"utterances":{"repo":"miruetoto/yechan3"}},"bibliography":["ref.bib"],"cap-location":"bottom","citation-location":"margin","title":"(메모) 우분투 포맷 및 개발용 서버 셋팅2","author":"신록예찬","date":"01/02/2000"}}},"projectFormats":["html"]}